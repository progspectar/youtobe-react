{"version":3,"file":"menu-button.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/menu-button!\n *\n * An accessible dropdown menu for the common dropdown menu button design\n * pattern.\n *\n * @see Docs     https://reach.tech/menu-button\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/menu-button\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n *\n * TODO: Fix flash when opening a menu button on a screen with another open menu\n */\n\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useId } from \"@reach/auto-id\";\nimport { Popover, Position } from \"@reach/popover\";\nimport {\n  createDescendantContext,\n  DescendantProvider,\n  useDescendant,\n  useDescendants,\n  useDescendantsInit,\n  useDescendantKeyDown,\n} from \"@reach/descendants\";\nimport {\n  createNamedContext,\n  forwardRefWithAs,\n  getOwnerDocument,\n  isFunction,\n  isString,\n  makeId,\n  noop,\n  useCheckStyles,\n  useForkedRef,\n  usePrevious,\n  wrapEvent,\n} from \"@reach/utils\";\n\nimport type { Descendant } from \"@reach/descendants\";\n\n////////////////////////////////////////////////////////////////////////////////\n// Actions\n\nconst CLEAR_SELECTION_INDEX = \"CLEAR_SELECTION_INDEX\";\nconst CLICK_MENU_ITEM = \"CLICK_MENU_ITEM\";\nconst CLOSE_MENU = \"CLOSE_MENU\";\nconst OPEN_MENU_AT_FIRST_ITEM = \"OPEN_MENU_AT_FIRST_ITEM\";\nconst OPEN_MENU_AT_INDEX = \"OPEN_MENU_AT_INDEX\";\nconst OPEN_MENU_CLEARED = \"OPEN_MENU_CLEARED\";\nconst SEARCH_FOR_ITEM = \"SEARCH_FOR_ITEM\";\nconst SELECT_ITEM_AT_INDEX = \"SELECT_ITEM_AT_INDEX\";\nconst SET_BUTTON_ID = \"SET_BUTTON_ID\";\n\nconst MenuDescendantContext = createDescendantContext<MenuButtonDescendant>(\n  \"MenuDescendantContext\"\n);\nconst MenuContext = createNamedContext<InternalMenuContextValue>(\n  \"MenuContext\",\n  {} as InternalMenuContextValue\n);\n\nconst initialState: MenuButtonState = {\n  // The button ID is needed for aria controls and can be set directly and\n  // updated for top-level use via context. Otherwise a default is set by useId.\n  // TODO: Consider deprecating direct ID in 1.0 in favor of id at the top level\n  //       for passing deterministic IDs to descendent components.\n  buttonId: null,\n\n  // Whether or not the menu is expanded\n  isExpanded: false,\n\n  // When a user begins typing a character string, the selection will change if\n  // a matching item is found\n  typeaheadQuery: \"\",\n\n  // The index of the current selected item. When the selection is cleared a\n  // value of -1 is used.\n  selectionIndex: -1,\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Menu\n *\n * The wrapper component for the other components. No DOM element is rendered.\n *\n * @see Docs https://reach.tech/menu-button#menu\n */\nconst Menu: React.FC<MenuProps> = ({ id, children }) => {\n  let buttonRef = React.useRef(null);\n  let menuRef = React.useRef(null);\n  let popoverRef = React.useRef(null);\n  let [descendants, setDescendants] = useDescendantsInit<\n    MenuButtonDescendant\n  >();\n  let [state, dispatch] = React.useReducer(reducer, initialState);\n  let _id = useId(id);\n  let menuId = id || makeId(\"menu\", _id);\n\n  // We use an event listener attached to the window to capture outside clicks\n  // that close the menu. We don't want the initial button click to trigger this\n  // when a menu is closed, so we can track this behavior in a ref for now.\n  // We shouldn't need this when we rewrite with state machine logic.\n  let buttonClickedRef = React.useRef(false);\n\n  // We will put children callbacks in a ref to avoid triggering endless render\n  // loops when using render props if the app code doesn't useCallback\n  // https://github.com/reach/reach-ui/issues/523\n  let selectCallbacks = React.useRef([]);\n\n  // If the popover's position overlaps with an option when the popover\n  // initially opens, the mouseup event will trigger a select. To prevent that,\n  // we decide the menu button is only ready to make a selection if the pointer\n  // moves first, otherwise the user is just registering the initial button\n  // click rather than selecting an item. This is similar to a native select\n  // on most platforms, and our menu button popover works similarly.\n  let readyToSelect = React.useRef(false);\n\n  let context: InternalMenuContextValue = {\n    buttonRef,\n    dispatch,\n    menuId,\n    menuRef,\n    popoverRef,\n    buttonClickedRef,\n    readyToSelect,\n    selectCallbacks,\n    state,\n  };\n\n  // When the menu is open, focus is placed on the menu itself so that\n  // keyboard navigation is still possible.\n  React.useEffect(() => {\n    if (state.isExpanded) {\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = true;\n      window.requestAnimationFrame(() => {\n        focus(menuRef.current);\n      });\n    } else {\n      // We want to ignore the immediate focus of a tooltip so it doesn't pop\n      // up again when the menu closes, only pops up when focus returns again\n      // to the tooltip (like native OS tooltips).\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = false;\n    }\n  }, [state.isExpanded]);\n\n  useCheckStyles(\"menu-button\");\n\n  return (\n    <DescendantProvider\n      context={MenuDescendantContext}\n      items={descendants}\n      set={setDescendants}\n    >\n      <MenuContext.Provider value={context}>\n        {isFunction(children)\n          ? children({\n              isExpanded: state.isExpanded,\n              // TODO: Remove in 1.0\n              isOpen: state.isExpanded,\n            })\n          : children}\n      </MenuContext.Provider>\n    </DescendantProvider>\n  );\n};\n\n/**\n * @see Docs https://reach.tech/menu-button#menu-props\n */\ninterface MenuProps {\n  /**\n   * Requires two children: a `<MenuButton>` and a `<MenuList>`.\n   *\n   * @see Docs https://reach.tech/menu-button#menu-children\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: MenuContextValue & {\n          // TODO: Remove in 1.0\n          isOpen: boolean;\n        }\n      ) => React.ReactNode);\n  id?: string;\n}\n\nif (__DEV__) {\n  Menu.displayName = \"Menu\";\n  Menu.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuButton\n *\n * Wraps a DOM `button` that toggles the opening and closing of the dropdown\n * menu. Must be rendered inside of a `<Menu>`.\n *\n * @see Docs https://reach.tech/menu-button#menubutton\n */\nconst MenuButton = forwardRefWithAs<MenuButtonProps, \"button\">(\n  function MenuButton(\n    { as: Comp = \"button\", onKeyDown, onMouseDown, id, ...props },\n    forwardedRef\n  ) {\n    let {\n      buttonRef,\n      buttonClickedRef,\n      menuId,\n      state: { buttonId, isExpanded },\n      dispatch,\n    } = React.useContext(MenuContext);\n    let ref = useForkedRef(buttonRef, forwardedRef);\n    let items = useDescendants(MenuDescendantContext);\n    let firstNonDisabledIndex = React.useMemo(\n      () => items.findIndex((item) => !item.disabled),\n      [items]\n    );\n    React.useEffect(() => {\n      let newButtonId =\n        id != null\n          ? id\n          : menuId\n          ? makeId(\"menu-button\", menuId)\n          : \"menu-button\";\n      if (buttonId !== newButtonId) {\n        dispatch({\n          type: SET_BUTTON_ID,\n          payload: newButtonId,\n        });\n      }\n    }, [buttonId, dispatch, id, menuId]);\n\n    function handleKeyDown(event: React.KeyboardEvent) {\n      switch (event.key) {\n        case \"ArrowDown\":\n        case \"ArrowUp\":\n          event.preventDefault(); // prevent scroll\n          dispatch({\n            type: OPEN_MENU_AT_INDEX,\n            payload: { index: firstNonDisabledIndex },\n          });\n          break;\n        case \"Enter\":\n        case \" \":\n          dispatch({\n            type: OPEN_MENU_AT_INDEX,\n            payload: { index: firstNonDisabledIndex },\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      if (!isExpanded) {\n        buttonClickedRef.current = true;\n      }\n      if (isRightClick(event.nativeEvent)) {\n        return;\n      } else if (isExpanded) {\n        dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n      } else {\n        dispatch({ type: OPEN_MENU_CLEARED });\n      }\n    }\n\n    return (\n      <Comp\n        // When the menu is displayed, the element with role `button` has\n        // `aria-expanded` set to `true`. When the menu is hidden, it is\n        // recommended that `aria-expanded` is not present.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-expanded={isExpanded ? true : undefined}\n        // The element with role `button` has `aria-haspopup` set to either\n        // `\"menu\"` or `true`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-haspopup\n        // Optionally, the element with role `button` has a value specified for\n        // `aria-controls` that refers to the element with role `menu`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-controls={menuId}\n        {...props}\n        ref={ref}\n        data-reach-menu-button=\"\"\n        id={buttonId || undefined}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        type=\"button\"\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/menu-button#menubutton-props\n */\ntype MenuButtonProps = {\n  /**\n   * Accepts any renderable content.\n   *\n   * @see Docs https://reach.tech/menu-button#menubutton-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  MenuButton.displayName = \"MenuButton\";\n  MenuButton.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItemImpl\n *\n * MenuItem and MenuLink share most of the same functionality captured here.\n */\nconst MenuItemImpl = forwardRefWithAs<MenuItemImplProps, \"div\">(\n  function MenuItemImpl(\n    {\n      as: Comp,\n      index: indexProp,\n      isLink = false,\n      onClick,\n      onDragStart,\n      onMouseDown,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseMove,\n      onMouseUp,\n      onSelect,\n      disabled,\n      valueText: valueTextProp,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let {\n      buttonRef,\n      dispatch,\n      readyToSelect,\n      selectCallbacks,\n      state: { selectionIndex, isExpanded },\n    } = React.useContext(MenuContext);\n    let ownRef = React.useRef<HTMLElement | null>(null);\n    // After the ref is mounted to the DOM node, we check to see if we have an\n    // explicit valueText prop before looking for the node's textContent for\n    // typeahead functionality.\n    let [valueText, setValueText] = React.useState(valueTextProp || \"\");\n    let setValueTextFromDom = React.useCallback(\n      (node) => {\n        if (node) {\n          ownRef.current = node;\n          if (\n            !valueTextProp ||\n            (node.textContent && valueText !== node.textContent)\n          ) {\n            setValueText(node.textContent);\n          }\n        }\n      },\n      [valueText, valueTextProp]\n    );\n\n    let ref = useForkedRef(forwardedRef, setValueTextFromDom);\n\n    let mouseEventStarted = React.useRef(false);\n\n    let index = useDescendant(\n      {\n        element: ownRef.current!,\n        key: valueText,\n        disabled,\n        isLink,\n      },\n      MenuDescendantContext,\n      indexProp\n    );\n    let isSelected = index === selectionIndex && !disabled;\n\n    // Update the callback ref array on every render\n    selectCallbacks.current[index] = onSelect;\n\n    function select() {\n      focus(buttonRef.current);\n      onSelect && onSelect();\n      dispatch({ type: CLICK_MENU_ITEM });\n    }\n\n    function handleClick(event: React.MouseEvent) {\n      if (isLink && !isRightClick(event.nativeEvent)) {\n        if (disabled) {\n          event.preventDefault();\n        } else {\n          select();\n        }\n      }\n    }\n\n    function handleDragStart(event: React.MouseEvent) {\n      // Because we don't preventDefault on mousedown for links (we need the\n      // native click event), clicking and holding on a link triggers a\n      // dragstart which we don't want.\n      if (isLink) {\n        event.preventDefault();\n      }\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      if (isRightClick(event.nativeEvent)) return;\n\n      if (isLink) {\n        // Signal that the mouse is down so we can react call the right function\n        // if the user is clicking on a link.\n        mouseEventStarted.current = true;\n      } else {\n        event.preventDefault();\n      }\n    }\n\n    function handleMouseEnter(event: React.MouseEvent) {\n      if (!isSelected && index != null && !disabled) {\n        dispatch({ type: SELECT_ITEM_AT_INDEX, payload: { index } });\n      }\n    }\n\n    function handleMouseLeave(event: React.MouseEvent) {\n      // Clear out selection when mouse over a non-menu item child.\n      dispatch({ type: CLEAR_SELECTION_INDEX });\n    }\n\n    function handleMouseMove() {\n      readyToSelect.current = true;\n      if (!isSelected && index != null && !disabled) {\n        dispatch({ type: SELECT_ITEM_AT_INDEX, payload: { index } });\n      }\n    }\n\n    function handleMouseUp(event: React.MouseEvent) {\n      if (!readyToSelect.current) {\n        readyToSelect.current = true;\n        return;\n      }\n      if (isRightClick(event.nativeEvent)) return;\n\n      if (isLink) {\n        // If a mousedown event was initiated on a menu link followed by a\n        // mouseup event on the same link, we do nothing; a click event will\n        // come next and handle selection. Otherwise, we trigger a click event.\n        if (mouseEventStarted.current) {\n          mouseEventStarted.current = false;\n        } else if (ownRef.current) {\n          ownRef.current.click();\n        }\n      } else {\n        if (!disabled) {\n          select();\n        }\n      }\n    }\n\n    // When the menu closes, reset readyToSelect for the next interaction.\n    React.useEffect(() => {\n      if (!isExpanded) {\n        readyToSelect.current = false;\n      }\n    }, [isExpanded, readyToSelect]);\n\n    // Any time a mouseup event occurs anywhere in the document, we reset the\n    // mouseEventStarted ref so we can check it again when needed.\n    React.useEffect(() => {\n      let ownerDocument = getOwnerDocument(ownRef.current)!;\n      let listener = () => (mouseEventStarted.current = false);\n      ownerDocument.addEventListener(\"mouseup\", listener);\n      return () => ownerDocument.removeEventListener(\"mouseup\", listener);\n    }, []);\n\n    return (\n      <Comp\n        role=\"menuitem\"\n        id={useMenuItemId(index)}\n        tabIndex={-1}\n        {...props}\n        ref={ref}\n        aria-disabled={disabled || undefined}\n        data-reach-menu-item=\"\"\n        data-selected={isSelected ? \"\" : undefined}\n        data-valuetext={valueText}\n        onClick={wrapEvent(onClick, handleClick)}\n        onDragStart={wrapEvent(onDragStart, handleDragStart)}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        onMouseEnter={wrapEvent(onMouseEnter, handleMouseEnter)}\n        onMouseLeave={wrapEvent(onMouseLeave, handleMouseLeave)}\n        onMouseMove={wrapEvent(onMouseMove, handleMouseMove)}\n        onMouseUp={wrapEvent(onMouseUp, handleMouseUp)}\n      />\n    );\n  }\n);\n\ntype MenuItemImplProps = {\n  /**\n   * You can put any type of content inside of a `<MenuItem>`.\n   *\n   * @see Docs https://reach.tech/menu-button#menuitem-children\n   */\n  children: React.ReactNode;\n  /**\n   * Callback that fires when a `MenuItem` is selected.\n   *\n   * @see Docs https://reach.tech/menu-button#menuitem-onselect\n   */\n  onSelect(): void;\n  index?: number;\n  isLink?: boolean;\n  valueText?: string;\n  /**\n   * Whether or not the item is disabled from selection and navigation.\n   *\n   * @see Docs https://reach.tech/menu-button#menuitem-disabled\n   */\n  disabled?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItem\n *\n * Handles menu selection. Must be a direct child of a `<MenuList>`.\n *\n * @see Docs https://reach.tech/menu-button#menuitem\n */\nconst MenuItem = forwardRefWithAs<MenuItemProps, \"div\">(function MenuItem(\n  { as = \"div\", ...props },\n  forwardedRef\n) {\n  return <MenuItemImpl {...props} ref={forwardedRef} as={as} />;\n});\n\n/**\n * @see Docs https://reach.tech/menu-button#menuitem-props\n */\ntype MenuItemProps = Omit<MenuItemImplProps, \"isLink\">;\n\nif (__DEV__) {\n  MenuItem.displayName = \"MenuItem\";\n  MenuItem.propTypes = {\n    as: PropTypes.any,\n    onSelect: PropTypes.func.isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItems\n *\n * A low-level wrapper for menu items. Compose it with `MenuPopover` for more\n * control over the nested components and their rendered DOM nodes, or if you\n * need to nest arbitrary components between the outer wrapper and your list.\n *\n * @see Docs https://reach.tech/menu-button#menuitems\n */\nconst MenuItems = forwardRefWithAs<MenuItemsProps, \"div\">(function MenuItems(\n  { as: Comp = \"div\", children, id, onKeyDown, ...props },\n  forwardedRef\n) {\n  const {\n    menuId,\n    dispatch,\n    buttonRef,\n    menuRef,\n    selectCallbacks,\n    state: { isExpanded, buttonId, selectionIndex, typeaheadQuery },\n  } = React.useContext(MenuContext);\n  const menuItems = useDescendants(MenuDescendantContext);\n  const ref = useForkedRef(menuRef, forwardedRef);\n\n  React.useEffect(() => {\n    // Respond to user char key input with typeahead\n    const match = findItemFromTypeahead(menuItems, typeaheadQuery);\n    if (typeaheadQuery && match != null) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: { index: match },\n      });\n    }\n    let timeout = window.setTimeout(\n      () => typeaheadQuery && dispatch({ type: SEARCH_FOR_ITEM, payload: \"\" }),\n      1000\n    );\n    return () => window.clearTimeout(timeout);\n  }, [dispatch, menuItems, typeaheadQuery]);\n\n  const prevMenuItemsLength = usePrevious(menuItems.length);\n  const prevSelected = usePrevious(menuItems[selectionIndex]);\n  const prevSelectionIndex = usePrevious(selectionIndex);\n\n  React.useEffect(() => {\n    if (selectionIndex > menuItems.length - 1) {\n      // If for some reason our selection index is larger than our possible\n      // index range (let's say the last item is selected and the list\n      // dynamically updates), we need to select the last item in the list.\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: { index: menuItems.length - 1 },\n      });\n    } else if (\n      // Checks if\n      //  - menu length has changed\n      //  - selection index has not changed BUT selected item has changed\n      //\n      // This prevents any dynamic adding/removing of menu items from actually\n      // changing a user's expected selection.\n      prevMenuItemsLength !== menuItems.length &&\n      selectionIndex > -1 &&\n      prevSelected &&\n      prevSelectionIndex === selectionIndex &&\n      menuItems[selectionIndex] !== prevSelected\n    ) {\n      dispatch({\n        type: SELECT_ITEM_AT_INDEX,\n        payload: {\n          index: menuItems.findIndex((i) => i.key === prevSelected.key),\n        },\n      });\n    }\n  }, [\n    dispatch,\n    menuItems,\n    prevMenuItemsLength,\n    prevSelected,\n    prevSelectionIndex,\n    selectionIndex,\n  ]);\n\n  let handleKeyDown = wrapEvent(\n    function handleKeyDown(event: React.KeyboardEvent) {\n      let { key } = event;\n\n      if (!isExpanded) {\n        return;\n      }\n\n      switch (key) {\n        case \"Enter\":\n        case \" \":\n          let selected = menuItems.find(\n            (item) => item.index === selectionIndex\n          );\n          // For links, the Enter key will trigger a click by default, but for\n          // consistent behavior across menu items we'll trigger a click when\n          // the spacebar is pressed.\n          if (selected) {\n            if (selected.isLink && selected.element) {\n              selected.element.click();\n            } else {\n              event.preventDefault();\n              // Focus the button first by default when an item is selected.\n              // We fire the onSelect callback next so the app can manage\n              // focus if needed.\n              focus(buttonRef.current);\n              selectCallbacks.current[selected.index] &&\n                selectCallbacks.current[selected.index]();\n              dispatch({ type: CLICK_MENU_ITEM });\n            }\n          }\n          break;\n        case \"Escape\":\n          focus(buttonRef.current);\n          dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n          break;\n        case \"Tab\":\n          // prevent leaving\n          event.preventDefault();\n          break;\n        default:\n          // Check if a user is typing some char keys and respond by setting\n          // the query state.\n          if (isString(key) && key.length === 1) {\n            const query = typeaheadQuery + key.toLowerCase();\n            dispatch({\n              type: SEARCH_FOR_ITEM,\n              payload: query,\n            });\n          }\n          break;\n      }\n    },\n    useDescendantKeyDown(MenuDescendantContext, {\n      currentIndex: selectionIndex,\n      orientation: \"vertical\",\n      rotate: false,\n      filter: (item) => !item.disabled,\n      callback: (index: number) => {\n        dispatch({\n          type: SELECT_ITEM_AT_INDEX,\n          payload: { index },\n        });\n      },\n      key: \"index\",\n    })\n  );\n\n  return (\n    // TODO: Should probably file a but in jsx-a11y, but this is correct\n    // according to https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n    // eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex\n    <Comp\n      // Refers to the descendant menuitem element that is visually indicated\n      // as focused.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n      aria-activedescendant={useMenuItemId(selectionIndex) || undefined}\n      // Refers to the element that contains the accessible name for the\n      // `menu`. The menu is labeled by the menu button.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n      aria-labelledby={buttonId || undefined}\n      // The element that contains the menu items displayed by activating the\n      // button has role menu.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n      role=\"menu\"\n      tabIndex={-1}\n      {...props}\n      ref={ref}\n      data-reach-menu-items=\"\"\n      id={menuId}\n      onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n    >\n      {children}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reach.tech/menu-button#menuitems-props\n */\ntype MenuItemsProps = {\n  /**\n   * Can contain only `MenuItem` or a `MenuLink`.\n   *\n   * @see Docs https://reach.tech/menu-button#menuitems-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  MenuItems.displayName = \"MenuItems\";\n  MenuItems.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuLink\n *\n * Handles linking to a different page in the menu. By default it renders `<a>`,\n * but also accepts any other kind of Link as long as the `Link` uses the\n * `React.forwardRef` API.\n *\n * Must be a direct child of a `<MenuList>`.\n *\n * @see Docs https://reach.tech/menu-button#menulink\n */\nconst MenuLink = forwardRefWithAs<MenuLinkProps & { component?: any }, \"a\">(\n  function MenuLink({ as = \"a\", component, onSelect, ...props }, forwardedRef) {\n    if (component) {\n      console.warn(\n        \"[@reach/menu-button]: Please use the `as` prop instead of `component`.\"\n      );\n    }\n\n    return (\n      <div role=\"none\" tabIndex={-1}>\n        <MenuItemImpl\n          {...props}\n          ref={forwardedRef}\n          data-reach-menu-link=\"\"\n          as={as}\n          isLink={true}\n          onSelect={onSelect || noop}\n        />\n      </div>\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/menu-button#menulink-props\n */\ntype MenuLinkProps = Omit<MenuItemImplProps, \"isLink\" | \"onSelect\"> & {\n  onSelect?(): void;\n};\n\nif (__DEV__) {\n  MenuLink.displayName = \"MenuLink\";\n  MenuLink.propTypes = {\n    as: PropTypes.any,\n    component: PropTypes.any,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuList\n *\n * Wraps a DOM element that renders the menu items. Must be rendered inside of\n * a `<Menu>`.\n *\n * @see Docs https://reach.tech/menu-button#menulist\n */\nconst MenuList = forwardRefWithAs<MenuListProps, \"div\">(function MenuList(\n  { portal = true, ...props },\n  forwardedRef\n) {\n  return (\n    <MenuPopover portal={portal}>\n      <MenuItems {...props} ref={forwardedRef} data-reach-menu-list=\"\" />\n    </MenuPopover>\n  );\n});\n\n/**\n * @see Docs https://reach.tech/menu-button#menulist-props\n */\ntype MenuListProps = {\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`.\n   *\n   * @see Docs https://reach.tech/menu-button#menulist-portal\n   */\n  portal?: boolean;\n  /**\n   * Can contain only `MenuItem` or a `MenuLink`.\n   *\n   * @see Docs https://reach.tech/menu-button#menulist-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  MenuList.displayName = \"MenuList\";\n  MenuList.propTypes = {\n    children: PropTypes.node.isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuPopover\n *\n * A low-level wrapper for the popover that appears when a menu button is open.\n * You can compose it with `MenuItems` for more control over the nested\n * components and their rendered DOM nodes, or if you need to nest arbitrary\n * components between the outer wrapper and your list.\n *\n * @see Docs https://reach.tech/menu-button#menupopover\n */\nconst MenuPopover = forwardRefWithAs<MenuPopoverProps, \"div\">(\n  function MenuPopover(\n    { as: Comp = \"div\", children, portal = true, position, ...props },\n    forwardedRef\n  ) {\n    const {\n      buttonRef,\n      buttonClickedRef,\n      dispatch,\n      menuRef,\n      popoverRef,\n      state: { isExpanded },\n    } = React.useContext(MenuContext);\n\n    const ref = useForkedRef(popoverRef, forwardedRef);\n\n    React.useEffect(() => {\n      let ownerDocument = getOwnerDocument(popoverRef.current)!;\n      function listener(event: MouseEvent | TouchEvent) {\n        if (buttonClickedRef.current) {\n          buttonClickedRef.current = false;\n        } else if (\n          !popoverContainsEventTarget(popoverRef.current, event.target)\n        ) {\n          // We on want to close only if focus rests outside the menu\n          dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n        }\n      }\n      ownerDocument.addEventListener(\"mousedown\", listener);\n      // see https://github.com/reach/reach-ui/pull/700#discussion_r530369265\n      // ownerDocument.addEventListener(\"touchstart\", listener);\n      return () => {\n        ownerDocument.removeEventListener(\"mousedown\", listener);\n        // ownerDocument.removeEventListener(\"touchstart\", listener);\n      };\n    }, [buttonClickedRef, buttonRef, dispatch, menuRef, popoverRef]);\n\n    let commonProps = {\n      ref,\n      // TODO: remove in 1.0\n      \"data-reach-menu\": \"\",\n      \"data-reach-menu-popover\": \"\",\n      hidden: !isExpanded,\n      children,\n      ...props,\n    };\n\n    return portal ? (\n      <Popover\n        {...commonProps}\n        as={Comp}\n        targetRef={buttonRef as any}\n        position={position}\n      />\n    ) : (\n      <Comp {...commonProps} />\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/menu-button#menupopover-props\n */\ntype MenuPopoverProps = {\n  /**\n   * Must contain a `MenuItems`\n   *\n   * @see Docs https://reach.tech/menu-button#menupopover-children\n   */\n  children: React.ReactNode;\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`.\n   *\n   * @see Docs https://reach.tech/menu-button#menupopover-portal\n   */\n  portal?: boolean;\n  /**\n   * A function used to determine the position of the popover in relation to the\n   * menu button. By default, the menu button will attempt to position the\n   * popover below the button aligned with its left edge. If this positioning\n   * results in collisions with any side of the window, the popover will be\n   * anchored to a different side to avoid those collisions if possible.\n   *\n   * @see Docs https://reach.tech/menu-button#menupopover-position\n   */\n  position?: Position;\n};\n\nif (__DEV__) {\n  MenuPopover.displayName = \"MenuPopover\";\n  MenuPopover.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Menu` component to its descendants.\n *\n * @see Docs https://reach.tech/menu-button#usemenubuttoncontext\n */\nfunction useMenuButtonContext(): MenuContextValue {\n  let {\n    state: { isExpanded },\n  } = React.useContext(MenuContext);\n  return React.useMemo(() => ({ isExpanded }), [isExpanded]);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * When a user's typed input matches the string displayed in a menu item, it is\n * expected that the matching menu item is selected. This is our matching\n * function.\n */\nfunction findItemFromTypeahead(\n  items: MenuButtonDescendant[],\n  string: string = \"\"\n) {\n  if (!string) {\n    return null;\n  }\n\n  const found = items.find((item) => {\n    return item.disabled\n      ? false\n      : item.element?.dataset?.valuetext?.toLowerCase().startsWith(string);\n  });\n  return found ? items.indexOf(found) : null;\n}\n\nfunction useMenuItemId(index: number | null) {\n  let { menuId } = React.useContext(MenuContext);\n  return index != null && index > -1\n    ? makeId(`option-${index}`, menuId)\n    : undefined;\n}\n\ninterface MenuButtonState {\n  isExpanded: boolean;\n  selectionIndex: number;\n  buttonId: null | string;\n  typeaheadQuery: string;\n}\n\ntype MenuButtonAction =\n  | { type: \"CLICK_MENU_ITEM\" }\n  | { type: \"CLOSE_MENU\"; payload: { buttonRef: ButtonRef } }\n  | { type: \"OPEN_MENU_AT_FIRST_ITEM\" }\n  | { type: \"OPEN_MENU_AT_INDEX\"; payload: { index: number } }\n  | { type: \"OPEN_MENU_CLEARED\" }\n  | {\n      type: \"SELECT_ITEM_AT_INDEX\";\n      payload: { max?: number; min?: number; index: number };\n    }\n  | { type: \"CLEAR_SELECTION_INDEX\" }\n  | { type: \"SET_BUTTON_ID\"; payload: string }\n  | { type: \"SEARCH_FOR_ITEM\"; payload: string };\n\nfunction isRightClick(nativeEvent: MouseEvent) {\n  return nativeEvent.which === 3 || nativeEvent.button === 2;\n}\n\nfunction focus<T extends HTMLElement = HTMLElement>(\n  element: T | undefined | null\n) {\n  element && element.focus();\n}\n\nfunction popoverContainsEventTarget(\n  popover: HTMLElement | null,\n  target: HTMLElement | EventTarget | null\n) {\n  return !!(popover && popover.contains(target as HTMLElement));\n}\n\nfunction reducer(\n  state: MenuButtonState,\n  action: MenuButtonAction = {} as MenuButtonAction\n): MenuButtonState {\n  switch (action.type) {\n    case CLICK_MENU_ITEM:\n      return {\n        ...state,\n        isExpanded: false,\n        selectionIndex: -1,\n      };\n    case CLOSE_MENU:\n      return {\n        ...state,\n        isExpanded: false,\n        selectionIndex: -1,\n      };\n    case OPEN_MENU_AT_FIRST_ITEM:\n      return {\n        ...state,\n        isExpanded: true,\n        selectionIndex: 0,\n      };\n    case OPEN_MENU_AT_INDEX:\n      return {\n        ...state,\n        isExpanded: true,\n        selectionIndex: action.payload.index,\n      };\n    case OPEN_MENU_CLEARED:\n      return {\n        ...state,\n        isExpanded: true,\n        selectionIndex: -1,\n      };\n    case SELECT_ITEM_AT_INDEX:\n      if (action.payload.index >= 0) {\n        return {\n          ...state,\n          selectionIndex:\n            action.payload.max != null\n              ? Math.min(Math.max(action.payload.index, 0), action.payload.max)\n              : Math.max(action.payload.index, 0),\n        };\n      }\n      return state;\n    case CLEAR_SELECTION_INDEX:\n      return {\n        ...state,\n        selectionIndex: -1,\n      };\n    case SET_BUTTON_ID:\n      return {\n        ...state,\n        buttonId: action.payload,\n      };\n    case SEARCH_FOR_ITEM:\n      if (typeof action.payload !== \"undefined\") {\n        return {\n          ...state,\n          typeaheadQuery: action.payload,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype MenuButtonDescendant = Descendant<HTMLElement> & {\n  key: string;\n  isLink: boolean;\n  disabled?: boolean;\n};\n\ntype ButtonRef = React.RefObject<null | HTMLElement>;\ntype MenuRef = React.RefObject<null | HTMLElement>;\ntype PopoverRef = React.RefObject<null | HTMLElement>;\n\ninterface InternalMenuContextValue {\n  buttonRef: ButtonRef;\n  buttonClickedRef: React.MutableRefObject<boolean>;\n  dispatch: React.Dispatch<MenuButtonAction>;\n  menuId: string | undefined;\n  menuRef: MenuRef;\n  popoverRef: PopoverRef;\n  readyToSelect: React.MutableRefObject<boolean>;\n  selectCallbacks: React.MutableRefObject<(() => void)[]>;\n  state: MenuButtonState;\n}\n\ntype MenuContextValue = {\n  isExpanded: boolean;\n  // id: string | undefined;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type {\n  MenuButtonProps,\n  MenuContextValue,\n  MenuItemProps,\n  MenuItemsProps,\n  MenuLinkProps,\n  MenuListProps,\n  MenuPopoverProps,\n  MenuProps,\n};\nexport {\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuItems,\n  MenuLink,\n  MenuList,\n  MenuPopover,\n  useMenuButtonContext,\n};\n"],"names":["MenuDescendantContext","createDescendantContext","MenuContext","createNamedContext","initialState","buttonId","isExpanded","typeaheadQuery","selectionIndex","MenuButton","forwardRefWithAs","forwardedRef","as","Comp","onKeyDown","onMouseDown","id","props","React","buttonRef","buttonClickedRef","menuId","state","dispatch","ref","useForkedRef","items","useDescendants","firstNonDisabledIndex","findIndex","item","disabled","newButtonId","makeId","type","payload","undefined","wrapEvent","event","key","preventDefault","index","current","isRightClick","nativeEvent","MenuItemImpl","indexProp","isLink","onClick","onDragStart","onMouseEnter","onMouseLeave","onMouseMove","onMouseUp","onSelect","valueTextProp","valueText","readyToSelect","selectCallbacks","ownRef","setValueText","setValueTextFromDom","node","textContent","mouseEventStarted","useDescendant","element","isSelected","select","focus","ownerDocument","getOwnerDocument","listener","addEventListener","removeEventListener","role","useMenuItemId","tabIndex","click","MenuItem","MenuItems","children","menuRef","menuItems","match","string","found","find","_item$element","dataset","_item$element$dataset","valuetext","_item$element$dataset2","toLowerCase","startsWith","indexOf","findItemFromTypeahead","timeout","window","setTimeout","clearTimeout","prevMenuItemsLength","usePrevious","length","prevSelected","prevSelectionIndex","i","handleKeyDown","selected","isString","query","useDescendantKeyDown","currentIndex","orientation","rotate","filter","callback","MenuLink","component","console","warn","noop","MenuList","portal","MenuPopover","position","popoverRef","popover","target","contains","popoverContainsEventTarget","commonProps","hidden","Popover","targetRef","which","button","reducer","action","max","Math","min","useDescendantsInit","descendants","setDescendants","_id","useId","context","__REACH_DISABLE_TOOLTIPS","requestAnimationFrame","useCheckStyles","DescendantProvider","set","Provider","value","isFunction","isOpen"],"mappings":"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"}